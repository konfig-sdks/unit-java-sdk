/*
 * Unit OpenAPI specifications
 * An OpenAPI specifications for unit-sdk clients
 *
 * The version of the OpenAPI document: 0.0.2
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.LocalDate;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * ApplicationDocumentDocumentAttributes
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ApplicationDocumentDocumentAttributes {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DOCUMENT_TYPE = "documentType";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_TYPE)
  private String documentType;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_NATIONALITY = "nationality";
  @SerializedName(SERIALIZED_NAME_NATIONALITY)
  private Object nationality = null;

  public static final String SERIALIZED_NAME_SSN = "ssn";
  @SerializedName(SERIALIZED_NAME_SSN)
  private String ssn;

  public static final String SERIALIZED_NAME_PASSPORT = "passport";
  @SerializedName(SERIALIZED_NAME_PASSPORT)
  private String passport;

  public static final String SERIALIZED_NAME_MATRICULA_CONSULAR = "matriculaConsular";
  @SerializedName(SERIALIZED_NAME_MATRICULA_CONSULAR)
  private String matriculaConsular;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private Object address = null;

  public static final String SERIALIZED_NAME_DATE_OF_INCORPORATION = "dateOfIncorporation";
  @SerializedName(SERIALIZED_NAME_DATE_OF_INCORPORATION)
  private LocalDate dateOfIncorporation;

  public static final String SERIALIZED_NAME_STATE_OF_INCORPORATION = "stateOfIncorporation";
  @SerializedName(SERIALIZED_NAME_STATE_OF_INCORPORATION)
  private String stateOfIncorporation;

  public static final String SERIALIZED_NAME_DATE_OF_BIRTH = "dateOfBirth";
  @SerializedName(SERIALIZED_NAME_DATE_OF_BIRTH)
  private LocalDate dateOfBirth;

  public static final String SERIALIZED_NAME_EIN = "ein";
  @SerializedName(SERIALIZED_NAME_EIN)
  private String ein;

  public static final String SERIALIZED_NAME_REASON_CODE = "reasonCode";
  @SerializedName(SERIALIZED_NAME_REASON_CODE)
  private String reasonCode;

  public static final String SERIALIZED_NAME_REASON = "reason";
  @SerializedName(SERIALIZED_NAME_REASON)
  private String reason;

  public static final String SERIALIZED_NAME_EVALUATION_ID = "evaluationId";
  @SerializedName(SERIALIZED_NAME_EVALUATION_ID)
  private String evaluationId;

  public static final String SERIALIZED_NAME_FRONT_DOCUMENT_ID = "frontDocumentId";
  @SerializedName(SERIALIZED_NAME_FRONT_DOCUMENT_ID)
  private String frontDocumentId;

  public static final String SERIALIZED_NAME_BACK_DOCUMENT_ID = "backDocumentId";
  @SerializedName(SERIALIZED_NAME_BACK_DOCUMENT_ID)
  private String backDocumentId;

  public static final String SERIALIZED_NAME_FRONT_DOCUMENT_STORE_ID = "frontDocumentStoreId";
  @SerializedName(SERIALIZED_NAME_FRONT_DOCUMENT_STORE_ID)
  private String frontDocumentStoreId;

  public static final String SERIALIZED_NAME_BACK_DOCUMENT_STORE_ID = "backDocumentStoreId";
  @SerializedName(SERIALIZED_NAME_BACK_DOCUMENT_STORE_ID)
  private String backDocumentStoreId;

  public ApplicationDocumentDocumentAttributes() {
  }

  public ApplicationDocumentDocumentAttributes description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public ApplicationDocumentDocumentAttributes documentType(String documentType) {
    
    
    
    
    this.documentType = documentType;
    return this;
  }

   /**
   * Get documentType
   * @return documentType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDocumentType() {
    return documentType;
  }


  public void setDocumentType(String documentType) {
    
    
    
    this.documentType = documentType;
  }


  public ApplicationDocumentDocumentAttributes status(String status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getStatus() {
    return status;
  }


  public void setStatus(String status) {
    
    
    
    this.status = status;
  }


  public ApplicationDocumentDocumentAttributes nationality(Object nationality) {
    
    
    
    
    this.nationality = nationality;
    return this;
  }

   /**
   * Get nationality
   * @return nationality
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getNationality() {
    return nationality;
  }


  public void setNationality(Object nationality) {
    
    
    
    this.nationality = nationality;
  }


  public ApplicationDocumentDocumentAttributes ssn(String ssn) {
    
    
    
    
    this.ssn = ssn;
    return this;
  }

   /**
   * Get ssn
   * @return ssn
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSsn() {
    return ssn;
  }


  public void setSsn(String ssn) {
    
    
    
    this.ssn = ssn;
  }


  public ApplicationDocumentDocumentAttributes passport(String passport) {
    
    
    
    
    this.passport = passport;
    return this;
  }

   /**
   * Get passport
   * @return passport
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPassport() {
    return passport;
  }


  public void setPassport(String passport) {
    
    
    
    this.passport = passport;
  }


  public ApplicationDocumentDocumentAttributes matriculaConsular(String matriculaConsular) {
    
    
    
    
    this.matriculaConsular = matriculaConsular;
    return this;
  }

   /**
   * Get matriculaConsular
   * @return matriculaConsular
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getMatriculaConsular() {
    return matriculaConsular;
  }


  public void setMatriculaConsular(String matriculaConsular) {
    
    
    
    this.matriculaConsular = matriculaConsular;
  }


  public ApplicationDocumentDocumentAttributes name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public ApplicationDocumentDocumentAttributes address(Object address) {
    
    
    
    
    this.address = address;
    return this;
  }

   /**
   * Get address
   * @return address
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getAddress() {
    return address;
  }


  public void setAddress(Object address) {
    
    
    
    this.address = address;
  }


  public ApplicationDocumentDocumentAttributes dateOfIncorporation(LocalDate dateOfIncorporation) {
    
    
    
    
    this.dateOfIncorporation = dateOfIncorporation;
    return this;
  }

   /**
   * Get dateOfIncorporation
   * @return dateOfIncorporation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public LocalDate getDateOfIncorporation() {
    return dateOfIncorporation;
  }


  public void setDateOfIncorporation(LocalDate dateOfIncorporation) {
    
    
    
    this.dateOfIncorporation = dateOfIncorporation;
  }


  public ApplicationDocumentDocumentAttributes stateOfIncorporation(String stateOfIncorporation) {
    
    
    
    
    this.stateOfIncorporation = stateOfIncorporation;
    return this;
  }

   /**
   * Get stateOfIncorporation
   * @return stateOfIncorporation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getStateOfIncorporation() {
    return stateOfIncorporation;
  }


  public void setStateOfIncorporation(String stateOfIncorporation) {
    
    
    
    this.stateOfIncorporation = stateOfIncorporation;
  }


  public ApplicationDocumentDocumentAttributes dateOfBirth(LocalDate dateOfBirth) {
    
    
    
    
    this.dateOfBirth = dateOfBirth;
    return this;
  }

   /**
   * Get dateOfBirth
   * @return dateOfBirth
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public LocalDate getDateOfBirth() {
    return dateOfBirth;
  }


  public void setDateOfBirth(LocalDate dateOfBirth) {
    
    
    
    this.dateOfBirth = dateOfBirth;
  }


  public ApplicationDocumentDocumentAttributes ein(String ein) {
    
    
    
    
    this.ein = ein;
    return this;
  }

   /**
   * Get ein
   * @return ein
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getEin() {
    return ein;
  }


  public void setEin(String ein) {
    
    
    
    this.ein = ein;
  }


  public ApplicationDocumentDocumentAttributes reasonCode(String reasonCode) {
    
    
    
    
    this.reasonCode = reasonCode;
    return this;
  }

   /**
   * Get reasonCode
   * @return reasonCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getReasonCode() {
    return reasonCode;
  }


  public void setReasonCode(String reasonCode) {
    
    
    
    this.reasonCode = reasonCode;
  }


  public ApplicationDocumentDocumentAttributes reason(String reason) {
    
    
    
    
    this.reason = reason;
    return this;
  }

   /**
   * Get reason
   * @return reason
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getReason() {
    return reason;
  }


  public void setReason(String reason) {
    
    
    
    this.reason = reason;
  }


  public ApplicationDocumentDocumentAttributes evaluationId(String evaluationId) {
    
    
    
    
    this.evaluationId = evaluationId;
    return this;
  }

   /**
   * Get evaluationId
   * @return evaluationId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getEvaluationId() {
    return evaluationId;
  }


  public void setEvaluationId(String evaluationId) {
    
    
    
    this.evaluationId = evaluationId;
  }


  public ApplicationDocumentDocumentAttributes frontDocumentId(String frontDocumentId) {
    
    
    
    
    this.frontDocumentId = frontDocumentId;
    return this;
  }

   /**
   * Get frontDocumentId
   * @return frontDocumentId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getFrontDocumentId() {
    return frontDocumentId;
  }


  public void setFrontDocumentId(String frontDocumentId) {
    
    
    
    this.frontDocumentId = frontDocumentId;
  }


  public ApplicationDocumentDocumentAttributes backDocumentId(String backDocumentId) {
    
    
    
    
    this.backDocumentId = backDocumentId;
    return this;
  }

   /**
   * Get backDocumentId
   * @return backDocumentId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getBackDocumentId() {
    return backDocumentId;
  }


  public void setBackDocumentId(String backDocumentId) {
    
    
    
    this.backDocumentId = backDocumentId;
  }


  public ApplicationDocumentDocumentAttributes frontDocumentStoreId(String frontDocumentStoreId) {
    
    
    
    
    this.frontDocumentStoreId = frontDocumentStoreId;
    return this;
  }

   /**
   * Get frontDocumentStoreId
   * @return frontDocumentStoreId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getFrontDocumentStoreId() {
    return frontDocumentStoreId;
  }


  public void setFrontDocumentStoreId(String frontDocumentStoreId) {
    
    
    
    this.frontDocumentStoreId = frontDocumentStoreId;
  }


  public ApplicationDocumentDocumentAttributes backDocumentStoreId(String backDocumentStoreId) {
    
    
    
    
    this.backDocumentStoreId = backDocumentStoreId;
    return this;
  }

   /**
   * Get backDocumentStoreId
   * @return backDocumentStoreId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getBackDocumentStoreId() {
    return backDocumentStoreId;
  }


  public void setBackDocumentStoreId(String backDocumentStoreId) {
    
    
    
    this.backDocumentStoreId = backDocumentStoreId;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ApplicationDocumentDocumentAttributes instance itself
   */
  public ApplicationDocumentDocumentAttributes putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicationDocumentDocumentAttributes applicationDocumentDocumentAttributes = (ApplicationDocumentDocumentAttributes) o;
    return Objects.equals(this.description, applicationDocumentDocumentAttributes.description) &&
        Objects.equals(this.documentType, applicationDocumentDocumentAttributes.documentType) &&
        Objects.equals(this.status, applicationDocumentDocumentAttributes.status) &&
        Objects.equals(this.nationality, applicationDocumentDocumentAttributes.nationality) &&
        Objects.equals(this.ssn, applicationDocumentDocumentAttributes.ssn) &&
        Objects.equals(this.passport, applicationDocumentDocumentAttributes.passport) &&
        Objects.equals(this.matriculaConsular, applicationDocumentDocumentAttributes.matriculaConsular) &&
        Objects.equals(this.name, applicationDocumentDocumentAttributes.name) &&
        Objects.equals(this.address, applicationDocumentDocumentAttributes.address) &&
        Objects.equals(this.dateOfIncorporation, applicationDocumentDocumentAttributes.dateOfIncorporation) &&
        Objects.equals(this.stateOfIncorporation, applicationDocumentDocumentAttributes.stateOfIncorporation) &&
        Objects.equals(this.dateOfBirth, applicationDocumentDocumentAttributes.dateOfBirth) &&
        Objects.equals(this.ein, applicationDocumentDocumentAttributes.ein) &&
        Objects.equals(this.reasonCode, applicationDocumentDocumentAttributes.reasonCode) &&
        Objects.equals(this.reason, applicationDocumentDocumentAttributes.reason) &&
        Objects.equals(this.evaluationId, applicationDocumentDocumentAttributes.evaluationId) &&
        Objects.equals(this.frontDocumentId, applicationDocumentDocumentAttributes.frontDocumentId) &&
        Objects.equals(this.backDocumentId, applicationDocumentDocumentAttributes.backDocumentId) &&
        Objects.equals(this.frontDocumentStoreId, applicationDocumentDocumentAttributes.frontDocumentStoreId) &&
        Objects.equals(this.backDocumentStoreId, applicationDocumentDocumentAttributes.backDocumentStoreId)&&
        Objects.equals(this.additionalProperties, applicationDocumentDocumentAttributes.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, documentType, status, nationality, ssn, passport, matriculaConsular, name, address, dateOfIncorporation, stateOfIncorporation, dateOfBirth, ein, reasonCode, reason, evaluationId, frontDocumentId, backDocumentId, frontDocumentStoreId, backDocumentStoreId, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicationDocumentDocumentAttributes {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    documentType: ").append(toIndentedString(documentType)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    nationality: ").append(toIndentedString(nationality)).append("\n");
    sb.append("    ssn: ").append(toIndentedString(ssn)).append("\n");
    sb.append("    passport: ").append(toIndentedString(passport)).append("\n");
    sb.append("    matriculaConsular: ").append(toIndentedString(matriculaConsular)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    dateOfIncorporation: ").append(toIndentedString(dateOfIncorporation)).append("\n");
    sb.append("    stateOfIncorporation: ").append(toIndentedString(stateOfIncorporation)).append("\n");
    sb.append("    dateOfBirth: ").append(toIndentedString(dateOfBirth)).append("\n");
    sb.append("    ein: ").append(toIndentedString(ein)).append("\n");
    sb.append("    reasonCode: ").append(toIndentedString(reasonCode)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    evaluationId: ").append(toIndentedString(evaluationId)).append("\n");
    sb.append("    frontDocumentId: ").append(toIndentedString(frontDocumentId)).append("\n");
    sb.append("    backDocumentId: ").append(toIndentedString(backDocumentId)).append("\n");
    sb.append("    frontDocumentStoreId: ").append(toIndentedString(frontDocumentStoreId)).append("\n");
    sb.append("    backDocumentStoreId: ").append(toIndentedString(backDocumentStoreId)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("documentType");
    openapiFields.add("status");
    openapiFields.add("nationality");
    openapiFields.add("ssn");
    openapiFields.add("passport");
    openapiFields.add("matriculaConsular");
    openapiFields.add("name");
    openapiFields.add("address");
    openapiFields.add("dateOfIncorporation");
    openapiFields.add("stateOfIncorporation");
    openapiFields.add("dateOfBirth");
    openapiFields.add("ein");
    openapiFields.add("reasonCode");
    openapiFields.add("reason");
    openapiFields.add("evaluationId");
    openapiFields.add("frontDocumentId");
    openapiFields.add("backDocumentId");
    openapiFields.add("frontDocumentStoreId");
    openapiFields.add("backDocumentStoreId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("status");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ApplicationDocumentDocumentAttributes
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ApplicationDocumentDocumentAttributes.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApplicationDocumentDocumentAttributes is not found in the empty JSON string", ApplicationDocumentDocumentAttributes.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ApplicationDocumentDocumentAttributes.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("documentType") != null && !jsonObj.get("documentType").isJsonNull()) && !jsonObj.get("documentType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `documentType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("documentType").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("ssn") != null && !jsonObj.get("ssn").isJsonNull()) && !jsonObj.get("ssn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ssn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ssn").toString()));
      }
      if ((jsonObj.get("passport") != null && !jsonObj.get("passport").isJsonNull()) && !jsonObj.get("passport").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `passport` to be a primitive type in the JSON string but got `%s`", jsonObj.get("passport").toString()));
      }
      if ((jsonObj.get("matriculaConsular") != null && !jsonObj.get("matriculaConsular").isJsonNull()) && !jsonObj.get("matriculaConsular").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `matriculaConsular` to be a primitive type in the JSON string but got `%s`", jsonObj.get("matriculaConsular").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("stateOfIncorporation") != null && !jsonObj.get("stateOfIncorporation").isJsonNull()) && !jsonObj.get("stateOfIncorporation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stateOfIncorporation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stateOfIncorporation").toString()));
      }
      if ((jsonObj.get("ein") != null && !jsonObj.get("ein").isJsonNull()) && !jsonObj.get("ein").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ein` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ein").toString()));
      }
      if ((jsonObj.get("reasonCode") != null && !jsonObj.get("reasonCode").isJsonNull()) && !jsonObj.get("reasonCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reasonCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reasonCode").toString()));
      }
      if ((jsonObj.get("reason") != null && !jsonObj.get("reason").isJsonNull()) && !jsonObj.get("reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reason").toString()));
      }
      if ((jsonObj.get("evaluationId") != null && !jsonObj.get("evaluationId").isJsonNull()) && !jsonObj.get("evaluationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `evaluationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("evaluationId").toString()));
      }
      if ((jsonObj.get("frontDocumentId") != null && !jsonObj.get("frontDocumentId").isJsonNull()) && !jsonObj.get("frontDocumentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `frontDocumentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("frontDocumentId").toString()));
      }
      if ((jsonObj.get("backDocumentId") != null && !jsonObj.get("backDocumentId").isJsonNull()) && !jsonObj.get("backDocumentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `backDocumentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("backDocumentId").toString()));
      }
      if ((jsonObj.get("frontDocumentStoreId") != null && !jsonObj.get("frontDocumentStoreId").isJsonNull()) && !jsonObj.get("frontDocumentStoreId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `frontDocumentStoreId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("frontDocumentStoreId").toString()));
      }
      if ((jsonObj.get("backDocumentStoreId") != null && !jsonObj.get("backDocumentStoreId").isJsonNull()) && !jsonObj.get("backDocumentStoreId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `backDocumentStoreId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("backDocumentStoreId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApplicationDocumentDocumentAttributes.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApplicationDocumentDocumentAttributes' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApplicationDocumentDocumentAttributes> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApplicationDocumentDocumentAttributes.class));

       return (TypeAdapter<T>) new TypeAdapter<ApplicationDocumentDocumentAttributes>() {
           @Override
           public void write(JsonWriter out, ApplicationDocumentDocumentAttributes value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ApplicationDocumentDocumentAttributes read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ApplicationDocumentDocumentAttributes instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ApplicationDocumentDocumentAttributes given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ApplicationDocumentDocumentAttributes
  * @throws IOException if the JSON string is invalid with respect to ApplicationDocumentDocumentAttributes
  */
  public static ApplicationDocumentDocumentAttributes fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApplicationDocumentDocumentAttributes.class);
  }

 /**
  * Convert an instance of ApplicationDocumentDocumentAttributes to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

