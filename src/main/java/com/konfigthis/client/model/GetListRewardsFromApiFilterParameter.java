/*
 * Unit OpenAPI specifications
 * An OpenAPI specifications for unit-sdk clients
 *
 * The version of the OpenAPI document: 0.0.2
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * GetListRewardsFromApiFilterParameter
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class GetListRewardsFromApiFilterParameter {
  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map<String, String> tags = null;

  public static final String SERIALIZED_NAME_TRANSACTION_ID = "transactionId";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_ID)
  private String transactionId;

  public static final String SERIALIZED_NAME_REWARDED_TRANSACTION_ID = "rewardedTransactionId";
  @SerializedName(SERIALIZED_NAME_REWARDED_TRANSACTION_ID)
  private String rewardedTransactionId;

  public static final String SERIALIZED_NAME_RECEIVING_ACCOUNT_ID = "receivingAccountId";
  @SerializedName(SERIALIZED_NAME_RECEIVING_ACCOUNT_ID)
  private String receivingAccountId;

  public static final String SERIALIZED_NAME_CUSTOMER_ID = "customerId";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_ID)
  private String customerId;

  public static final String SERIALIZED_NAME_CARD_ID = "cardId";
  @SerializedName(SERIALIZED_NAME_CARD_ID)
  private String cardId;

  public static final String SERIALIZED_NAME_SINCE = "since";
  @SerializedName(SERIALIZED_NAME_SINCE)
  private String since;

  public static final String SERIALIZED_NAME_UNTIL = "until";
  @SerializedName(SERIALIZED_NAME_UNTIL)
  private String until;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public GetListRewardsFromApiFilterParameter() {
  }

  public GetListRewardsFromApiFilterParameter tags(Map<String, String> tags) {
    
    
    
    
    this.tags = tags;
    return this;
  }

  public GetListRewardsFromApiFilterParameter putTagsItem(String key, String tagsItem) {
    if (this.tags == null) {
      this.tags = new HashMap<>();
    }
    this.tags.put(key, tagsItem);
    return this;
  }

   /**
   * Get tags
   * @return tags
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Map<String, String> getTags() {
    return tags;
  }


  public void setTags(Map<String, String> tags) {
    
    
    
    this.tags = tags;
  }


  public GetListRewardsFromApiFilterParameter transactionId(String transactionId) {
    
    
    
    
    this.transactionId = transactionId;
    return this;
  }

   /**
   * Get transactionId
   * @return transactionId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTransactionId() {
    return transactionId;
  }


  public void setTransactionId(String transactionId) {
    
    
    
    this.transactionId = transactionId;
  }


  public GetListRewardsFromApiFilterParameter rewardedTransactionId(String rewardedTransactionId) {
    
    
    
    
    this.rewardedTransactionId = rewardedTransactionId;
    return this;
  }

   /**
   * Get rewardedTransactionId
   * @return rewardedTransactionId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getRewardedTransactionId() {
    return rewardedTransactionId;
  }


  public void setRewardedTransactionId(String rewardedTransactionId) {
    
    
    
    this.rewardedTransactionId = rewardedTransactionId;
  }


  public GetListRewardsFromApiFilterParameter receivingAccountId(String receivingAccountId) {
    
    
    
    
    this.receivingAccountId = receivingAccountId;
    return this;
  }

   /**
   * Get receivingAccountId
   * @return receivingAccountId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getReceivingAccountId() {
    return receivingAccountId;
  }


  public void setReceivingAccountId(String receivingAccountId) {
    
    
    
    this.receivingAccountId = receivingAccountId;
  }


  public GetListRewardsFromApiFilterParameter customerId(String customerId) {
    
    
    
    
    this.customerId = customerId;
    return this;
  }

   /**
   * Get customerId
   * @return customerId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCustomerId() {
    return customerId;
  }


  public void setCustomerId(String customerId) {
    
    
    
    this.customerId = customerId;
  }


  public GetListRewardsFromApiFilterParameter cardId(String cardId) {
    
    
    
    
    this.cardId = cardId;
    return this;
  }

   /**
   * Get cardId
   * @return cardId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCardId() {
    return cardId;
  }


  public void setCardId(String cardId) {
    
    
    
    this.cardId = cardId;
  }


  public GetListRewardsFromApiFilterParameter since(String since) {
    
    
    
    
    this.since = since;
    return this;
  }

   /**
   * Get since
   * @return since
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSince() {
    return since;
  }


  public void setSince(String since) {
    
    
    
    this.since = since;
  }


  public GetListRewardsFromApiFilterParameter until(String until) {
    
    
    
    
    this.until = until;
    return this;
  }

   /**
   * Get until
   * @return until
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getUntil() {
    return until;
  }


  public void setUntil(String until) {
    
    
    
    this.until = until;
  }


  public GetListRewardsFromApiFilterParameter status(String status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getStatus() {
    return status;
  }


  public void setStatus(String status) {
    
    
    
    this.status = status;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the GetListRewardsFromApiFilterParameter instance itself
   */
  public GetListRewardsFromApiFilterParameter putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetListRewardsFromApiFilterParameter getListRewardsFromApiFilterParameter = (GetListRewardsFromApiFilterParameter) o;
    return Objects.equals(this.tags, getListRewardsFromApiFilterParameter.tags) &&
        Objects.equals(this.transactionId, getListRewardsFromApiFilterParameter.transactionId) &&
        Objects.equals(this.rewardedTransactionId, getListRewardsFromApiFilterParameter.rewardedTransactionId) &&
        Objects.equals(this.receivingAccountId, getListRewardsFromApiFilterParameter.receivingAccountId) &&
        Objects.equals(this.customerId, getListRewardsFromApiFilterParameter.customerId) &&
        Objects.equals(this.cardId, getListRewardsFromApiFilterParameter.cardId) &&
        Objects.equals(this.since, getListRewardsFromApiFilterParameter.since) &&
        Objects.equals(this.until, getListRewardsFromApiFilterParameter.until) &&
        Objects.equals(this.status, getListRewardsFromApiFilterParameter.status)&&
        Objects.equals(this.additionalProperties, getListRewardsFromApiFilterParameter.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tags, transactionId, rewardedTransactionId, receivingAccountId, customerId, cardId, since, until, status, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetListRewardsFromApiFilterParameter {\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    transactionId: ").append(toIndentedString(transactionId)).append("\n");
    sb.append("    rewardedTransactionId: ").append(toIndentedString(rewardedTransactionId)).append("\n");
    sb.append("    receivingAccountId: ").append(toIndentedString(receivingAccountId)).append("\n");
    sb.append("    customerId: ").append(toIndentedString(customerId)).append("\n");
    sb.append("    cardId: ").append(toIndentedString(cardId)).append("\n");
    sb.append("    since: ").append(toIndentedString(since)).append("\n");
    sb.append("    until: ").append(toIndentedString(until)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("tags");
    openapiFields.add("transactionId");
    openapiFields.add("rewardedTransactionId");
    openapiFields.add("receivingAccountId");
    openapiFields.add("customerId");
    openapiFields.add("cardId");
    openapiFields.add("since");
    openapiFields.add("until");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to GetListRewardsFromApiFilterParameter
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!GetListRewardsFromApiFilterParameter.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetListRewardsFromApiFilterParameter is not found in the empty JSON string", GetListRewardsFromApiFilterParameter.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("transactionId") != null && !jsonObj.get("transactionId").isJsonNull()) && !jsonObj.get("transactionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactionId").toString()));
      }
      if ((jsonObj.get("rewardedTransactionId") != null && !jsonObj.get("rewardedTransactionId").isJsonNull()) && !jsonObj.get("rewardedTransactionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rewardedTransactionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rewardedTransactionId").toString()));
      }
      if ((jsonObj.get("receivingAccountId") != null && !jsonObj.get("receivingAccountId").isJsonNull()) && !jsonObj.get("receivingAccountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `receivingAccountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("receivingAccountId").toString()));
      }
      if ((jsonObj.get("customerId") != null && !jsonObj.get("customerId").isJsonNull()) && !jsonObj.get("customerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customerId").toString()));
      }
      if ((jsonObj.get("cardId") != null && !jsonObj.get("cardId").isJsonNull()) && !jsonObj.get("cardId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardId").toString()));
      }
      if ((jsonObj.get("since") != null && !jsonObj.get("since").isJsonNull()) && !jsonObj.get("since").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `since` to be a primitive type in the JSON string but got `%s`", jsonObj.get("since").toString()));
      }
      if ((jsonObj.get("until") != null && !jsonObj.get("until").isJsonNull()) && !jsonObj.get("until").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `until` to be a primitive type in the JSON string but got `%s`", jsonObj.get("until").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetListRewardsFromApiFilterParameter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetListRewardsFromApiFilterParameter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetListRewardsFromApiFilterParameter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetListRewardsFromApiFilterParameter.class));

       return (TypeAdapter<T>) new TypeAdapter<GetListRewardsFromApiFilterParameter>() {
           @Override
           public void write(JsonWriter out, GetListRewardsFromApiFilterParameter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public GetListRewardsFromApiFilterParameter read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             GetListRewardsFromApiFilterParameter instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of GetListRewardsFromApiFilterParameter given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of GetListRewardsFromApiFilterParameter
  * @throws IOException if the JSON string is invalid with respect to GetListRewardsFromApiFilterParameter
  */
  public static GetListRewardsFromApiFilterParameter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetListRewardsFromApiFilterParameter.class);
  }

 /**
  * Convert an instance of GetListRewardsFromApiFilterParameter to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

