/*
 * Unit OpenAPI specifications
 * An OpenAPI specifications for unit-sdk clients
 *
 * The version of the OpenAPI document: 0.0.2
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ApproveAuthorizationRequestByIdRequest;
import com.konfigthis.client.model.ApproveAuthorizationRequestByIdResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ApproveAuthorizationRequestApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ApproveAuthorizationRequestApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ApproveAuthorizationRequestApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call byIdCall(String authorizationId, ApproveAuthorizationRequestByIdRequest approveAuthorizationRequestByIdRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = approveAuthorizationRequestByIdRequest;

        // create path and map variables
        String localVarPath = "/authorization-requests/{authorizationId}/approve"
            .replace("{" + "authorizationId" + "}", localVarApiClient.escapeString(authorizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call byIdValidateBeforeCall(String authorizationId, ApproveAuthorizationRequestByIdRequest approveAuthorizationRequestByIdRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorizationId' is set
        if (authorizationId == null) {
            throw new ApiException("Missing the required parameter 'authorizationId' when calling byId(Async)");
        }

        // verify the required parameter 'approveAuthorizationRequestByIdRequest' is set
        if (approveAuthorizationRequestByIdRequest == null) {
            throw new ApiException("Missing the required parameter 'approveAuthorizationRequestByIdRequest' when calling byId(Async)");
        }

        return byIdCall(authorizationId, approveAuthorizationRequestByIdRequest, _callback);

    }


    private ApiResponse<ApproveAuthorizationRequestByIdResponse> byIdWithHttpInfo(String authorizationId, ApproveAuthorizationRequestByIdRequest approveAuthorizationRequestByIdRequest) throws ApiException {
        okhttp3.Call localVarCall = byIdValidateBeforeCall(authorizationId, approveAuthorizationRequestByIdRequest, null);
        Type localVarReturnType = new TypeToken<ApproveAuthorizationRequestByIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call byIdAsync(String authorizationId, ApproveAuthorizationRequestByIdRequest approveAuthorizationRequestByIdRequest, final ApiCallback<ApproveAuthorizationRequestByIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = byIdValidateBeforeCall(authorizationId, approveAuthorizationRequestByIdRequest, _callback);
        Type localVarReturnType = new TypeToken<ApproveAuthorizationRequestByIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ByIdRequestBuilder {
        private final String authorizationId;
        private Object data;

        private ByIdRequestBuilder(String authorizationId) {
            this.authorizationId = authorizationId;
        }

        /**
         * Set data
         * @param data  (optional)
         * @return ByIdRequestBuilder
         */
        public ByIdRequestBuilder data(Object data) {
            this.data = data;
            return this;
        }
        
        /**
         * Build call for byId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ApproveAuthorizationRequestByIdRequest approveAuthorizationRequestByIdRequest = buildBodyParams();
            return byIdCall(authorizationId, approveAuthorizationRequestByIdRequest, _callback);
        }

        private ApproveAuthorizationRequestByIdRequest buildBodyParams() {
            ApproveAuthorizationRequestByIdRequest approveAuthorizationRequestByIdRequest = new ApproveAuthorizationRequestByIdRequest();
            approveAuthorizationRequestByIdRequest.data(this.data);
            return approveAuthorizationRequestByIdRequest;
        }

        /**
         * Execute byId request
         * @return ApproveAuthorizationRequestByIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApproveAuthorizationRequestByIdResponse execute() throws ApiException {
            ApproveAuthorizationRequestByIdRequest approveAuthorizationRequestByIdRequest = buildBodyParams();
            ApiResponse<ApproveAuthorizationRequestByIdResponse> localVarResp = byIdWithHttpInfo(authorizationId, approveAuthorizationRequestByIdRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute byId request with HTTP info returned
         * @return ApiResponse&lt;ApproveAuthorizationRequestByIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ApproveAuthorizationRequestByIdResponse> executeWithHttpInfo() throws ApiException {
            ApproveAuthorizationRequestByIdRequest approveAuthorizationRequestByIdRequest = buildBodyParams();
            return byIdWithHttpInfo(authorizationId, approveAuthorizationRequestByIdRequest);
        }

        /**
         * Execute byId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ApproveAuthorizationRequestByIdResponse> _callback) throws ApiException {
            ApproveAuthorizationRequestByIdRequest approveAuthorizationRequestByIdRequest = buildBodyParams();
            return byIdAsync(authorizationId, approveAuthorizationRequestByIdRequest, _callback);
        }
    }

    /**
     * Approve Authorization Request by Id
     * Approve a Authorization Request via API 
     * @param authorizationId ID of the authorization request to approve (required)
     * @param approveAuthorizationRequestByIdRequest Approve Authorization Request (required)
     * @return ByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public ByIdRequestBuilder byId(String authorizationId) throws IllegalArgumentException {
        if (authorizationId == null) throw new IllegalArgumentException("\"authorizationId\" is required but got null");
            

        return new ByIdRequestBuilder(authorizationId);
    }
}
