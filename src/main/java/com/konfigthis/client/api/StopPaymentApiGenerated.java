/*
 * Unit OpenAPI specifications
 * An OpenAPI specifications for unit-sdk clients
 *
 * The version of the OpenAPI document: 0.0.2
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.StopPaymentCreateRequest;
import com.konfigthis.client.model.StopPaymentCreateResponse;
import com.konfigthis.client.model.StopPaymentGetListFilterParameter;
import com.konfigthis.client.model.StopPaymentGetListResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class StopPaymentApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public StopPaymentApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public StopPaymentApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call cancelCall(String stopPaymentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stop-payments/{stop_payment_id}"
            .replace("{" + "stop_payment_id" + "}", localVarApiClient.escapeString(stopPaymentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelValidateBeforeCall(String stopPaymentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stopPaymentId' is set
        if (stopPaymentId == null) {
            throw new ApiException("Missing the required parameter 'stopPaymentId' when calling cancel(Async)");
        }

        return cancelCall(stopPaymentId, _callback);

    }


    private ApiResponse<Void> cancelWithHttpInfo(String stopPaymentId) throws ApiException {
        okhttp3.Call localVarCall = cancelValidateBeforeCall(stopPaymentId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call cancelAsync(String stopPaymentId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = cancelValidateBeforeCall(stopPaymentId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class CancelRequestBuilder {
        private final String stopPaymentId;

        private CancelRequestBuilder(String stopPaymentId) {
            this.stopPaymentId = stopPaymentId;
        }

        /**
         * Build call for cancel
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Stop payment successfully canceled </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Stop payment not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return cancelCall(stopPaymentId, _callback);
        }


        /**
         * Execute cancel request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Stop payment successfully canceled </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Stop payment not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            cancelWithHttpInfo(stopPaymentId);
        }

        /**
         * Execute cancel request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Stop payment successfully canceled </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Stop payment not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return cancelWithHttpInfo(stopPaymentId);
        }

        /**
         * Execute cancel request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Stop payment successfully canceled </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Stop payment not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return cancelAsync(stopPaymentId, _callback);
        }
    }

    /**
     * Cancel a stop payment
     * 
     * @param stopPaymentId ID of the stop payment (required)
     * @return CancelRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Stop payment successfully canceled </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Stop payment not found </td><td>  -  </td></tr>
     </table>
     */
    public CancelRequestBuilder cancel(String stopPaymentId) throws IllegalArgumentException {
        if (stopPaymentId == null) throw new IllegalArgumentException("\"stopPaymentId\" is required but got null");
            

        return new CancelRequestBuilder(stopPaymentId);
    }
    private okhttp3.Call createCall(StopPaymentCreateRequest stopPaymentCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = stopPaymentCreateRequest;

        // create path and map variables
        String localVarPath = "/stop-payments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createValidateBeforeCall(StopPaymentCreateRequest stopPaymentCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stopPaymentCreateRequest' is set
        if (stopPaymentCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'stopPaymentCreateRequest' when calling create(Async)");
        }

        return createCall(stopPaymentCreateRequest, _callback);

    }


    private ApiResponse<StopPaymentCreateResponse> createWithHttpInfo(StopPaymentCreateRequest stopPaymentCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = createValidateBeforeCall(stopPaymentCreateRequest, null);
        Type localVarReturnType = new TypeToken<StopPaymentCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createAsync(StopPaymentCreateRequest stopPaymentCreateRequest, final ApiCallback<StopPaymentCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createValidateBeforeCall(stopPaymentCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<StopPaymentCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateRequestBuilder {
        private final Object data;

        private CreateRequestBuilder(Object data) {
            this.data = data;
        }

        /**
         * Build call for create
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            StopPaymentCreateRequest stopPaymentCreateRequest = buildBodyParams();
            return createCall(stopPaymentCreateRequest, _callback);
        }

        private StopPaymentCreateRequest buildBodyParams() {
            StopPaymentCreateRequest stopPaymentCreateRequest = new StopPaymentCreateRequest();
            stopPaymentCreateRequest.data(this.data);
            return stopPaymentCreateRequest;
        }

        /**
         * Execute create request
         * @return StopPaymentCreateResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public StopPaymentCreateResponse execute() throws ApiException {
            StopPaymentCreateRequest stopPaymentCreateRequest = buildBodyParams();
            ApiResponse<StopPaymentCreateResponse> localVarResp = createWithHttpInfo(stopPaymentCreateRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute create request with HTTP info returned
         * @return ApiResponse&lt;StopPaymentCreateResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<StopPaymentCreateResponse> executeWithHttpInfo() throws ApiException {
            StopPaymentCreateRequest stopPaymentCreateRequest = buildBodyParams();
            return createWithHttpInfo(stopPaymentCreateRequest);
        }

        /**
         * Execute create request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<StopPaymentCreateResponse> _callback) throws ApiException {
            StopPaymentCreateRequest stopPaymentCreateRequest = buildBodyParams();
            return createAsync(stopPaymentCreateRequest, _callback);
        }
    }

    /**
     * Create Stop Payment
     * 
     * @param stopPaymentCreateRequest  (required)
     * @return CreateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public CreateRequestBuilder create(Object data) throws IllegalArgumentException {
        if (data == null) throw new IllegalArgumentException("\"data\" is required but got null");
        return new CreateRequestBuilder(data);
    }
    private okhttp3.Call disableStopPaymentCall(String stopPaymentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stop-payments/{stop_payment_id}/disable"
            .replace("{" + "stop_payment_id" + "}", localVarApiClient.escapeString(stopPaymentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call disableStopPaymentValidateBeforeCall(String stopPaymentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stopPaymentId' is set
        if (stopPaymentId == null) {
            throw new ApiException("Missing the required parameter 'stopPaymentId' when calling disableStopPayment(Async)");
        }

        return disableStopPaymentCall(stopPaymentId, _callback);

    }


    private ApiResponse<Object> disableStopPaymentWithHttpInfo(String stopPaymentId) throws ApiException {
        okhttp3.Call localVarCall = disableStopPaymentValidateBeforeCall(stopPaymentId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call disableStopPaymentAsync(String stopPaymentId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = disableStopPaymentValidateBeforeCall(stopPaymentId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DisableStopPaymentRequestBuilder {
        private final String stopPaymentId;

        private DisableStopPaymentRequestBuilder(String stopPaymentId) {
            this.stopPaymentId = stopPaymentId;
        }

        /**
         * Build call for disableStopPayment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Stop payment not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return disableStopPaymentCall(stopPaymentId, _callback);
        }


        /**
         * Execute disableStopPayment request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Stop payment not found </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = disableStopPaymentWithHttpInfo(stopPaymentId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute disableStopPayment request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Stop payment not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return disableStopPaymentWithHttpInfo(stopPaymentId);
        }

        /**
         * Execute disableStopPayment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Stop payment not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return disableStopPaymentAsync(stopPaymentId, _callback);
        }
    }

    /**
     * Disable a stop payment
     * 
     * @param stopPaymentId ID of the stop payment (required)
     * @return DisableStopPaymentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Stop payment not found </td><td>  -  </td></tr>
     </table>
     */
    public DisableStopPaymentRequestBuilder disableStopPayment(String stopPaymentId) throws IllegalArgumentException {
        if (stopPaymentId == null) throw new IllegalArgumentException("\"stopPaymentId\" is required but got null");
            

        return new DisableStopPaymentRequestBuilder(stopPaymentId);
    }
    private okhttp3.Call getDetailsCall(String stopPaymentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stop-payments/{stop_payment_id}"
            .replace("{" + "stop_payment_id" + "}", localVarApiClient.escapeString(stopPaymentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDetailsValidateBeforeCall(String stopPaymentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stopPaymentId' is set
        if (stopPaymentId == null) {
            throw new ApiException("Missing the required parameter 'stopPaymentId' when calling getDetails(Async)");
        }

        return getDetailsCall(stopPaymentId, _callback);

    }


    private ApiResponse<Object> getDetailsWithHttpInfo(String stopPaymentId) throws ApiException {
        okhttp3.Call localVarCall = getDetailsValidateBeforeCall(stopPaymentId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDetailsAsync(String stopPaymentId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDetailsValidateBeforeCall(stopPaymentId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetDetailsRequestBuilder {
        private final String stopPaymentId;

        private GetDetailsRequestBuilder(String stopPaymentId) {
            this.stopPaymentId = stopPaymentId;
        }

        /**
         * Build call for getDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Stop payment not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDetailsCall(stopPaymentId, _callback);
        }


        /**
         * Execute getDetails request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Stop payment not found </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = getDetailsWithHttpInfo(stopPaymentId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getDetails request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Stop payment not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return getDetailsWithHttpInfo(stopPaymentId);
        }

        /**
         * Execute getDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Stop payment not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return getDetailsAsync(stopPaymentId, _callback);
        }
    }

    /**
     * Get details of a specific stop payment
     * 
     * @param stopPaymentId ID of the stop payment (required)
     * @return GetDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Stop payment not found </td><td>  -  </td></tr>
     </table>
     */
    public GetDetailsRequestBuilder getDetails(String stopPaymentId) throws IllegalArgumentException {
        if (stopPaymentId == null) throw new IllegalArgumentException("\"stopPaymentId\" is required but got null");
            

        return new GetDetailsRequestBuilder(stopPaymentId);
    }
    private okhttp3.Call getListCall(ERRORUNKNOWN page, StopPaymentGetListFilterParameter filter, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stop-payments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getListValidateBeforeCall(ERRORUNKNOWN page, StopPaymentGetListFilterParameter filter, String sort, final ApiCallback _callback) throws ApiException {
        return getListCall(page, filter, sort, _callback);

    }


    private ApiResponse<StopPaymentGetListResponse> getListWithHttpInfo(ERRORUNKNOWN page, StopPaymentGetListFilterParameter filter, String sort) throws ApiException {
        okhttp3.Call localVarCall = getListValidateBeforeCall(page, filter, sort, null);
        Type localVarReturnType = new TypeToken<StopPaymentGetListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getListAsync(ERRORUNKNOWN page, StopPaymentGetListFilterParameter filter, String sort, final ApiCallback<StopPaymentGetListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getListValidateBeforeCall(page, filter, sort, _callback);
        Type localVarReturnType = new TypeToken<StopPaymentGetListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetListRequestBuilder {
        private ERRORUNKNOWN page;
        private StopPaymentGetListFilterParameter filter;
        private String sort;

        private GetListRequestBuilder() {
        }

        /**
         * Set page
         * @param page  (optional)
         * @return GetListRequestBuilder
         */
        public GetListRequestBuilder page(ERRORUNKNOWN page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set filter
         * @param filter  (optional)
         * @return GetListRequestBuilder
         */
        public GetListRequestBuilder filter(StopPaymentGetListFilterParameter filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Set sort
         * @param sort  (optional)
         * @return GetListRequestBuilder
         */
        public GetListRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Build call for getList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getListCall(page, filter, sort, _callback);
        }


        /**
         * Execute getList request
         * @return StopPaymentGetListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public StopPaymentGetListResponse execute() throws ApiException {
            ApiResponse<StopPaymentGetListResponse> localVarResp = getListWithHttpInfo(page, filter, sort);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getList request with HTTP info returned
         * @return ApiResponse&lt;StopPaymentGetListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<StopPaymentGetListResponse> executeWithHttpInfo() throws ApiException {
            return getListWithHttpInfo(page, filter, sort);
        }

        /**
         * Execute getList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<StopPaymentGetListResponse> _callback) throws ApiException {
            return getListAsync(page, filter, sort, _callback);
        }
    }

    /**
     * Get a list of stop payments
     * 
     * @return GetListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetListRequestBuilder getList() throws IllegalArgumentException {
        return new GetListRequestBuilder();
    }
}
